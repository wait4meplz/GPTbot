import asyncio
from vkbottle.user import User
from vkbottle.bot import Bot, Message
from vkbottle.dispatch.rules.base import CommandRule, RegexRule
from vkbottle import API, BaseStateGroup, CtxStorage
from settings import myApi,groupApi, comms, helpmes, dialogHelp
import numpy as np
import os
import sys
import requests
import urllib.request

from copilot import Copilot

ctx = CtxStorage()

class States(BaseStateGroup):
    GENERATING = 0
    DIALOG_CH = 1
    DIALOG = 2
    END = 3

class StatesPicture(BaseStateGroup):
    Q = 0
    END = 1

dialog = np.load('/GPTbot/second/dialogs.npy', allow_pickle='True').item()

bot = Bot(token=groupApi)
user = User(token=myApi)
api = API(token=groupApi)
myApi = API(token=myApi)

def _generate_copilot(prompt: str):
    copilot = Copilot()
    c = copilot.get_answer(prompt  )

    return c

def _generate_picture(prompt: str):
    copilot = Copilot()
    c = copilot.get_picture(prompt)

    return c

def _generate_dialog(prompt):
    copilot = Copilot()
    c = copilot.get_dialog(prompt)

    return c

@bot.on.private_message(state=None)
async def messageHandler(message: Message):
    text = message.text
    if '/–æ—Ç–≤–µ—Ç' in text:
        await message.answer('‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')
        answer = await generateAnswer(message.from_id, text.replace('/–æ—Ç–≤–µ—Ç', ""))
        await message.answer(answer)
    elif '/—Ç–æ—á–Ω—ã–π–æ—Ç–≤–µ—Ç' in text:
        await message.answer('‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç... (—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /–æ—Ç–≤–µ—Ç)')
        answer = await generateAnswer(message.from_id, text.replace('/–æ—Ç–≤–µ—Ç', ""))
        await message.answer(answer)
    elif '/–∫–∞—Ä—Ç–∏–Ω–∫–∞' in text:
        await message.answer(
            '‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É... (30 —Å–µ–∫—É–Ω–¥ - 5 –º–∏–Ω—É—Ç, –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –µ—Å–ª–∏ –¥–æ–ª—å—à–µ - –Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ)')
        answer = await generatePicture(message.from_id, text.replace('/–æ—Ç–≤–µ—Ç', ""))
        await message.answer(answer)
    elif '/–¥–∏–∞–ª–æ–≥' in text:
        await generateDialog(message)
    elif text == '/–æ—Ç–º–µ–Ω–∞':
        await bot.state_dispenser.set(message.peer_id, States.END)
        await message.answer('‚úÖ –°–±—Ä–æ—Å–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')
    elif text.lower() == '–∫–æ–º–∞–Ω–¥—ã' or text.lower() == '–ø–æ–º–æ—â—å':
        await message.answer(helpmes)
    elif text.split(" ")[0] == '–±–æ—Ç':
        if text.split(" ")[1] == '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Å—å':
            await message.answer('–°–∫–æ—Ä–æ –±—É–¥—É...')
            os.system('python3 bot.py')
            sys.exit(0)
        if text.split(" ")[1] == '–≤—ã–∫–ª—é—á–∏—Å—å':
            await message.answer('–ü–æ–∫–∞!')
            os.system('python3 wait.py')
            sys.exit(0)
        elif text.split(" ")[1] == '—Ç—É—Ç':
            await message.answer('–¢—É—Ç!')
    elif len(message.attachments) > 0:
        mes = message
        if mes.attachments[0].audio_message.duration > 60:
            await message.answer('‚ùå–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –ì–°, –∏–∑–≤–∏–Ω–∏ :(')
        else:
            await mes.answer('üí¨–ß–∏—Ç–∞—é –≥–æ–ª–æ—Å–æ–≤—É—é, –∂–¥–∏...')
            await asyncio.sleep(5)
            for i in range(3):
                try:
                    bbb = await api.messages.get_history(user_id=message.from_id, count=2, offset=1)
                except Exception as e:
                    await mes.answer(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—ã—Ç–∫–∞ {i}... \n –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {e}')
                else:
                    if bbb.items[0].attachments[0].audio_message.transcript_state == 'done':
                        ts = bbb.items[0].attachments[0].audio_message.transcript
                        await bot.state_dispenser.set(message.from_id, States.GENERATING)
                        answer = _generate_copilot(ts)
                        await message.answer(f'üí¨ –¢—ã —Å–ø—Ä–æ—Å–∏–ª "{ts}", –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª:\n\n' + answer)
                        break
                    else:
                        continue

    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞–ø–∏—à–∏ "–∫–æ–º–∞–Ω–¥—ã"! :–∑')

@bot.on.private_message(state=States.END)
async def messageHandler2(message: Message):
    text = message.text
    if '/–æ—Ç–≤–µ—Ç' in text:
        await message.answer('‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')
        answer = await generateAnswer(message.from_id, text.replace('/–æ—Ç–≤–µ—Ç', ""))
        await message.answer(answer)
    elif '/—Ç–æ—á–Ω—ã–π–æ—Ç–≤–µ—Ç' in text:
        await message.answer('‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç... (—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /–æ—Ç–≤–µ—Ç)')
        answer = await generateAnswer(message.from_id, text.replace('/–æ—Ç–≤–µ—Ç', ""))
        await message.answer(answer)
    elif '/–∫–∞—Ä—Ç–∏–Ω–∫–∞' in text:
        await message.answer(
            '‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É... (30 —Å–µ–∫—É–Ω–¥ - 5 –º–∏–Ω—É—Ç, –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –µ—Å–ª–∏ –¥–æ–ª—å—à–µ - –Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ)')
        answer = await generatePicture(message.from_id, text.replace('/–æ—Ç–≤–µ—Ç', ""))
        await message.answer(answer)
    elif '/–¥–∏–∞–ª–æ–≥' in text:
        await generateDialog(message)
    elif text == '/–æ—Ç–º–µ–Ω–∞':
        await bot.state_dispenser.set(message.peer_id, States.END)
        await message.answer('‚úÖ –°–±—Ä–æ—Å–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')
    elif text.lower() == '–∫–æ–º–∞–Ω–¥—ã' or text.lower() == '–ø–æ–º–æ—â—å':
        await message.answer(helpmes)
    elif text.split(" ")[0] == '–±–æ—Ç':
        if text.split(" ")[1] == '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Å—å':
            await message.answer('–°–∫–æ—Ä–æ –±—É–¥—É...')
            os.system('python3 bot.py')
            sys.exit(0)
        if text.split(" ")[1] == '–≤—ã–∫–ª—é—á–∏—Å—å':
            await message.answer('–ü–æ–∫–∞!')
            os.system('python3 wait.py')
            sys.exit(0)
        elif text.split(" ")[1] == '—Ç—É—Ç':
            await message.answer('–¢—É—Ç!')
    elif len(message.attachments) > 0:
        mes = message
        if mes.attachments[0].audio_message.duration > 60:
            await message.answer('‚ùå–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –ì–°, –∏–∑–≤–∏–Ω–∏ :(')
        else:
            await mes.answer('‚åõ –ß–∏—Ç–∞—é –≥–æ–ª–æ—Å–æ–≤—É—é, –∂–¥–∏...')
            await asyncio.sleep(5)
            for i in range(3):
                try:
                    bbb = await api.messages.get_history(user_id=message.from_id, count=2, offset=1)
                except Exception as e:
                    await mes.answer(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—ã—Ç–∫–∞ {i}... \n –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {e}')
                else:
                    if bbb.items[0].attachments[0].audio_message.transcript_state == 'done':
                        ts = bbb.items[0].attachments[0].audio_message.transcript
                        await bot.state_dispenser.set(message.from_id, States.GENERATING)
                        answer = _generate_copilot(ts)
                        await message.answer(f'üí¨ –¢—ã —Å–ø—Ä–æ—Å–∏–ª "{ts}", –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª:\n\n' + answer)
                        break
                    else:
                        continue

    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞–ø–∏—à–∏ "–∫–æ–º–∞–Ω–¥—ã"! :–∑')


@bot.on.private_message(text=('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π','—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å','–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π','–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'), state=States.END)
async def start(message: Message):
    await bot.state_dispenser.set(message.peer_id, States.END)
    await message.answer('‚ö† –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–µ–Ω—è–ª –±–æ—Ç–∞. –¢–µ–ø–µ—Ä—å –æ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: \n\n /–æ—Ç–≤–µ—Ç <–∑–∞–ø—Ä–æ—Å> \n/–∫–∞—Ä—Ç–∏–Ω–∫–∞ <–∑–∞–ø—Ä–æ—Å>\n/–¥–∏–∞–ª–æ–≥\n–õ–∏–±–æ –≤–≤–µ–¥–∏ "–∫–æ–º–∞–Ω–¥—ã"')

async def generatePicture(peerid, prompt):
    await bot.state_dispenser.set(peerid, States.END)
    await bot.state_dispenser.set(peerid, States.GENERATING)
    answer = _generate_picture(prompt)
    await bot.state_dispenser.set(peerid, States.END)
    return ('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É: ' + answer)

async def generateAnswer(peerid, msg):
    await bot.state_dispenser.set(peerid, States.END)
    await bot.state_dispenser.set(peerid, States.GENERATING)
    answer = _generate_copilot(msg)
    await bot.state_dispenser.set(peerid, States.END)
    return answer

async def generateDialog(message):
    await bot.state_dispenser.set(message.peer_id, States.END)
    await message.answer(dialogHelp)
    await bot.state_dispenser.set(message.peer_id, States.DIALOG_CH)

@bot.on.private_message(state=States.DIALOG_CH)
async def generateDialog2(message: Message):
    if len(message.text.split()) < 10:
        await message.answer('‚ö† –•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∑–∞–¥–∞–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º :)\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞, –Ω–∞–ø–∏—à–∏ /–æ—Ç–º–µ–Ω–∞.–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –Ω–∞–ø–∏—à–∏ /—Å–±—Ä–æ—Å.  \n\n(–±–æ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª, —á—Ç–æ —Ç—ã –∑–∞–¥–∞–ª –¥–æ–≤–æ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç —Ç–µ–∫—É—â–∏–π - –Ω–∞–ø–∏—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –µ—â—ë —Ä–∞–∑ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ.)')
    else:
        await message.answer(
            'üí¨ –•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∑–∞–¥–∞–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º :)\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞, –Ω–∞–ø–∏—à–∏ /–æ—Ç–º–µ–Ω–∞. –ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –Ω–∞–ø–∏—à–∏ /—Å–±—Ä–æ—Å')
    dialog[message.from_id] = [{'role': 'system', 'content': f'{message.text}'}]
    await bot.state_dispenser.set(message.peer_id, States.DIALOG)

@bot.on.private_message(state=States.DIALOG, text='/—Å–±—Ä–æ—Å')
async def dialogStop(message: Message):
    await bot.state_dispenser.set(message.peer_id, States.END)
    dialog.pop(message.from_id)
    await bot.state_dispenser.set(message.peer_id, States.DIALOG_CH)
    await message.answer('‚úÖ –û–∫–µ–π, —Å–±—Ä–æ—Å–∏–ª –¥–∏–∞–ª–æ–≥. –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!')

@bot.on.private_message(state=States.DIALOG, text='/–æ—Ç–º–µ–Ω–∞')
async def dialogStop(message: Message):
    await bot.state_dispenser.set(message.peer_id, States.END)
    dialog.pop(message.from_id)
    await message.answer('‚úÖ –í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞.')

@bot.on.private_message(text='/–æ—Ç–º–µ–Ω–∞')
async def dialogStop(message: Message):
    await bot.state_dispenser.set(message.peer_id, States.END)
    await message.answer('‚úÖ –í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞.')

@bot.on.private_message(state=States.DIALOG)
async def dialogGenerate(message: Message):
    await message.answer('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')
    if message.text in comms:
        dialog[message.from_id].append({'role' : 'user', 'content' : message.text})
        answer = _generate_dialog(dialog[message.from_id])
        await message.answer(answer[0] + "\n\n(‚ö†–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ - –Ω–∞–ø–∏—à–∏ /–æ—Ç–º–µ–Ω–∞‚ö†)")
    elif len(message.attachments) > 0:
        await message.answer('‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è (–≤ —Ç–æ–º —á–∏—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ) –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞.')
    else:
        dialog[message.from_id].append({'role': 'user', 'content': message.text})
        answer = _generate_dialog(dialog[message.from_id])
        await message.answer(answer[0])

@bot.on.private_message(state=States.GENERATING)
async def alreadyGenerating(message: Message):
    await message.answer('‚ö†–¢—ã —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –∑–∞–ø—Ä–æ—Å! –î–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.')

@bot.on.private_message(text='–¥–µ–±–∞–≥ <msg>')
async def deb(message: Message, msg):
    text = message.text.lower()
    text2 = message.text.split(" ")
    if msg == '–¥–æ–Ω—ã':
        a = await myApi.donut.get_subscription(owner_id=-219131806)
        print(a)

@bot.on.private_message(text='–±–æ—Ç <msg>')
async def reload(message: Message, msg):
    if msg == '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Å—å':
        await message.answer('–°–∫–æ—Ä–æ –±—É–¥—É...')
        os.system('python3 bot.py')
        sys.exit(0)
    if msg == '–≤—ã–∫–ª—é—á–∏—Å—å':
        await message.answer('–ü–æ–∫–∞!')
        os.system('python3 wait.py')
        sys.exit(0)
    elif msg == '—Ç—É—Ç':
        await message.answer('–¢—É—Ç!')
bot.run_forever()